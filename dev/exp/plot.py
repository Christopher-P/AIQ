### Used to plot experimental results from run.py
import csv
import numpy as np
from scipy.stats import pearsonr

import matplotlib.pyplot as plt

def load_file(filename):
    data = []
    with open('data_bak/' + filename, newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter='|', quotechar=' ')
        for row in spamreader:
            data.append((row[0], row[1], float(row[2])))

    return data

# Return normalized data (0,1)
def scale_data(data, scales):
    s_data = []
    # 10 x 10 tests
    for i in range(10):
        for j in range(10):
            # Norm to 0,1
            try:
                s = (data[i + j*10][2] - scales[i][0]) / (scales[i][1] - scales[i][0])
            except:
                s = 0
            s_data.append((data[i*10+j][0], data[i*10+j][1], s))

    return s_data

# Plot results in a heatmap
def cross_table(data):
    counter = 0
    keys = {}
    for val in data:
        if val[0] not in keys:
            keys[val[0]] = counter
            counter += 1
        if val[1] not in keys:
            keys[val[1]] = counter
            counter += 1

    res = np.zeros([len(keys),len(keys)])

    for val in data:
        res[keys[val[0]]][keys[val[1]]] = val[2]

    #print(res)
    return res

# Plot the cross tabled data
def plott(res):

    # new plot
    fig, ax = plt.subplots(figsize=(14, 10))
    im = ax.imshow(res)
    print(res.shape)

    # We want to show all ticks...
    ax.set_xticks(np.arange(len(res)))
    ax.set_yticks(np.arange(len(res)))
    # ... and label them with the respective list entries
    #ax.set_xticklabels(list(keys.keys()))
    #ax.set_yticklabels(list(keys.keys()))

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    # Loop over data dimensions and create text annotations.
    for i in range(len(res)):
        for j in range(len(res)):
            text = ax.text(j, i, round(res[i, j],2), size=13,
                           ha="center", va="center", color="w")

    ax.set_title("Similarity table for current test suite")
    fig.tight_layout()
    plt.savefig('HeatMap.png', dpi=400)
    plt.show()

    return None

# Load results generated by AIQ sim measure
def load_AIQ():
    data = []

    with open('d=1.csv', newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=',', quotechar='|')
        for row in spamreader:
            data.append(row)

    A = None
    B = None
    name1 = None
    name2 = None
    counter = 0
    info = []

    for ind, val in enumerate(data):
        if counter >= 3:
            counter = 0
        
        if counter == 0:
            name1 = val[0]
            A = float(val[2])

        elif counter == 1:
            name2 = val[0]
            B = float(val[2])

        elif counter == 2:
            Vmax = max(A,B)
            Vmin = min(A,B)
            V = float(val[2])
            if A == B:
                S = 0.5
            else:
                S = abs(abs(Vmax - V) - abs(Vmin - V) ) / abs( A  - B )
            info.append((name1, name2, S))         

        else:
            print('error')
            exit()

        counter += 1
        continue
    return info


files = ['Reward.csv','Ratio.csv', 'JumpStart.csv', 'Asymptotic.csv']

# Generated from find_scales.py
scales = [(15.0, 261.0), (15.0, 265.0), (-699.0, -615.0), (-399.0, -399.0), (-71.0, 144.0), (0.0, 1.0), (-26058.0, -143.0), (1318.0, 1782.0), (0.0, 1.0), (-1164.0, -162.0)]

# Get sim measure data
info = load_AIQ()
info = cross_table(info)
# this one entry is out of whach
info[7,8] = info[7,5]
info[7,5] = 0.0
## Fill out table (remove 0.0 values)
for i in range(10):
    for j in range(10):
        info[j,i] = info[i,j]

# Scale data now
for name in files:
    # Load data
    data = load_file(name)
    
    # Scale data
    #s_data = scale_data(data, scales)

    #plott(info)

    # Cross table the data
    ct = cross_table(data)

    pearson = np.corrcoef(ct,info)
    # This is a 2x2 coorelation matrix, so get one corner
    top_right = np.asarray([pearson[i][10:] for i in range(10)])

    # Plot the data
    plott(top_right)    
    





